{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;\f2\fmodern\fcharset0 Courier;
}
{\colortbl;\red255\green255\blue255;\red151\green26\blue16;\red0\green30\blue174;\red42\green92\blue17;
\red156\green27\blue17;\red0\green30\blue173;\red41\green92\blue17;\red224\green38\blue24;\red161\green26\blue17;
\red0\green29\blue172;\red39\green92\blue17;\red0\green0\blue191;}
{\*\expandedcolortbl;;\csgenericrgb\c59216\c10196\c6275;\csgenericrgb\c0\c11765\c68235;\csgenericrgb\c16471\c36078\c6667;
\csgenericrgb\c61176\c10588\c6667;\csgenericrgb\c0\c11765\c67843;\csgenericrgb\c16078\c36078\c6667;\csgenericrgb\c87843\c14902\c9412;\csgenericrgb\c63137\c10196\c6667;
\csgenericrgb\c0\c11373\c67451;\csgenericrgb\c15294\c36078\c6667;\csgenericrgb\c0\c0\c74902;}
\deftab720
\pard\pardeftab720

\f0\b\fs36 \cf0 CTRNN			
\fs24 Continuous Time Recurrent Neural Networks
\fs36 	
\b0\fs24 \
\
\pard\pardeftab720

\f1\fs18 \cf0 \
\pard\pardeftab720
\cf2 //CTRNNs\
\
\
//look at some random CTRNNs with the traditional smoothing function\
\pard\pardeftab720
\cf0 ~params = \cf3 CTRNNParams\cf0 .new;\
~params.timeStep = 0.05;\
~params.numInputNodes=0;\
~params.numHiddenNodes = 7;\
~params.hSinMixMax=0;\
\
(\
\pard\pardeftab720
\cf2 //create a random ctrnn\
\pard\pardeftab720
\cf0 ~ctrnn = \cf3 CTRNN\cf0 .new(~params);\
~outputs = \cf3 List\cf0 .new;\
\pard\pardeftab720
\cf2 //run the network 1000 times\
\pard\pardeftab720
\cf0 1000.do \{\
	~ctrnn.update([]);\
	\cf2 //store the outputs of the last 3 nodes\
\cf0 	3.do \{ \cf3 |i|\cf0 \
		~outputs.add(~ctrnn.hiddenNode[4 + i].output);\
	\};\
\};\
~outputs.asArray.plot(numChannels:3);\
)\
\
\pard\pardeftab720
\cf2 //change the smoothing function to get some more interesting results\
\pard\pardeftab720
\cf0 ~params.hSinMixMax=1;\
\
\pard\pardeftab720
\cf2 //generate some more outputs\
\pard\pardeftab720
\cf0 (\
~ctrnn = \cf3 CTRNN\cf0 .new(~params);\
~outputs = \cf3 List\cf0 .new;\
\pard\pardeftab720
\cf2 //run the network 1000 times\
\pard\pardeftab720
\cf0 1000.do \{\
	~ctrnn.update([]);\
	\cf2 //store the outputs of the last 3 nodes\
\cf0 	3.do \{ \cf3 |i|\cf0 \
		~outputs.add(~ctrnn.hiddenNode[4 + i].output);\
	\};\
\};\
~outputs.asArray.plot(numChannels:3);\
)\
\
\
\pard\pardeftab720
\cf2 //try sonifying the results\
\pard\pardeftab720
\cf0 s.boot;\
\
(\
\pard\pardeftab720
\cf3 SynthDef\cf0 (\cf4 \\CTRNNhelp1\cf0 , \{\cf4 \
\pard\pardeftab720
\cf0 	\cf3 |freq = 220, amp=1, pan=0|\
\cf0 	\cf3 var\cf0  w = 0.5*\cf3 SinOsc\cf0 .ar(freq)*(\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural
\cf0 \{\
	var t, grav, sf, chain, sig;\
	sf = LFPulse.ar(0.5);\
	grav = LFNoise1.ar(1).range(0.1, 1/10);\
	t = Gendy2.ar(sf, grav, 0.01, 0.0001) * freq;\
	\
	chain = FFT(LocalBuf(1024), t);\
	chain = chain.pvcalc(1024, \{|mags, phases|\
		[phases, mags];\
	\});\
	chain = PV_BrickWall(chain, LFNoise2.kr(1).range(-1, 0.5));\
	chain = PV_RandComb(chain, LFNoise2.kr(1).range(0, 1), Dust.kr(freq));\
	sig = IFFT(chain);\
	\
	sig = sig ! 2;\
	sig = sig + AllpassC.ar([sig[1], sig[0]], 0.1, \{LFNoise2.kr(0.5).range(0.01, 0.1)\} ! 2, 2);\
	sig = sig + AllpassC.ar(sig, 0.1, \{LFNoise2.kr(0.1).range(0.01, 0.1)\} ! 2, 1);\
	\
	sig = LPF.ar(sig, 15000) + LPF.ar([sig[1], sig[0]], 500, 5) + LPF.ar(sig, 200, 10);\
	sig = sig * 10;\
\};\
);\
\pard\pardeftab720
\cf0 	\cf3 Out\cf0 .ar(0, \cf3 Pan2\cf0 .ar(w, pan, amp));\
\}).store;\
)\
\
\
~ctrnnControlledSine = \cf3 Synth\cf0 .new(\cf4 \\CTRNNhelp1\cf0 );\
\
(\
\pard\pardeftab720
\cf2 //try this block several times to hear some different results\
\pard\pardeftab720
\cf0 ~ctrnnLoop !? \{~ctrnnLoop.stop\};\
\pard\pardeftab720
\cf2 //make a random ctrnn\
\pard\pardeftab720
\cf0 ~ctrnn = \cf3 CTRNN\cf0 .new(~params);\
~ctrnnLoop = \{\
	\cf3 inf\cf0 .do \{\
		~ctrnn.update([]);\
		~ctrnnControlledSine.set(\cf4 \\freq\cf0 , [20,20000,\cf4 \\exp\cf0 ].asSpec.map(~ctrnn.hiddenNode[4].output));\
		~ctrnnControlledSine.set(\cf4 \\amp\cf0 , ~ctrnn.hiddenNode[5].output);\
		~params.timeStep.wait;\
	\};\
\}.fork(\cf3 AppClock\cf0 );\
)\
\
\
(\
~ctrnnControlledSine.free;\
~ctrnnLoop.stop;\
)\
\
(\
\pard\pardeftab720
\cf2 //a function to run and display ctrnns\
\pard\pardeftab720
\cf0 ~showCTRNN = \{\
	\cf3 |ctrnn,count|\
\cf0 	\cf3 var\cf0  outputs = \cf3 List\cf0 .new;\
	\cf2 //run the network\
\cf0 	count.do \{\
		ctrnn.update([]);\
		\cf2 //store the outputs of the last 3 nodes\
\cf0 		ctrnn.hiddenNode.size.do \{ \cf3 |i|\cf0 \
			outputs.add(ctrnn.hiddenNode[i].output);\
		\};\
	\};\
	outputs.asArray.plot(numChannels:ctrnn.hiddenNode.size);\
\};\
)\
\
\pard\pardeftab720
\cf2 //create a random CTRNN from a genotype\
\pard\pardeftab720
\cf0 \
~params.numHiddenNodes = 3;\
~genoType = \{1.0.rand\} ! \cf3 CTRNN\cf0 .getGenotypeLength(~params.numInputNodes, ~params.numHiddenNodes); \
\pard\pardeftab720
\cf2 //create a CTRNN\
\pard\pardeftab720
\cf0 ~ctrnn = \cf3 CTRNN\cf0 .new(~params, ~genoType);\
\
~showCTRNN.(~ctrnn, 1000);\
\
\pard\pardeftab720
\cf2 //create mutations from the parent genotype\
\pard\pardeftab720
\cf0 ~ctrnn.mutate(0.1, 0.001);\
~showCTRNN.(~ctrnn, 1000);\
~ctrnn.mutate(0.1, 0.001);\
~showCTRNN.(~ctrnn, 1000);\
\
\pard\pardeftab720
\cf2 //make the parent genotype the same as the current mutation\
\pard\pardeftab720
\cf0 ~ctrnn.mutateForward;\
\
\pard\pardeftab720
\cf2 //mutate from this the new parent\
\pard\pardeftab720
\cf0 ~ctrnn.mutate(0.1, 0.001);\
~showCTRNN.(~ctrnn, 1000);\
\
\
\pard\pardeftab720
\cf5 ///////////////////////////////////////////////////////////\
// Evolving drum patterns\
\pard\pardeftab720
\cf0 \
(\
\pard\pardeftab720
\cf6 SynthDef\cf0 (\cf7 \\memDrum\cf0 , \{\cf6 \
\pard\pardeftab720
\cf0 	\cf6 |tension=0.05, loss=0.99, amp=0.5|\
\cf0 	\cf6 var\cf0  e = \cf6 Env\cf0 .perc(0.01, 0.1, amp);\
	\cf6 var\cf0  eg = \cf6 EnvGen\cf0 .ar(e, doneAction:0) * \cf6 BrownNoise\cf0 .ar(0.2);\
	\cf6 var\cf0  w = 
\f2\fs24 ClipNoise.ar
\f1\fs18 (eg, tension, loss);\
	\cf6 Out\cf0 .ar(0, w.dup);\
	\cf6 DetectSilence\cf0 .ar(w, doneAction:2);\
\}).store;\
)\
\
~params = \cf6 CTRNNParams\cf0 .new;\
~params.timeStep = 0.05;\
~params.numInputNodes=0;\
~params.numHiddenNodes = 50;  \cf8 //lots of nodes to make the output more interesting\
\cf0 ~params.hSinMixMax=1;\
\
(\
\pard\pardeftab720
\cf5 //try this block several times to hear some different results\
\pard\pardeftab720
\cf0 ~ctrnnLoop !? \{~ctrnnLoop.stop\};\
\pard\pardeftab720
\cf5 //make a random ctrnn\
\pard\pardeftab720
\cf0 ~ctrnn = \cf6 CTRNN\cf0 .new(~params);\
~lastOutput1=0;\
~lastOutput2=0;\
~lastOutput3=0;\
~ctrnnLoop = \{\
	\cf6 inf\cf0 .do \{\
		~ctrnn.update([]);\
		if ((~lastOutput1 - ~ctrnn.hiddenNode[5].output).abs > 0.7, \{\
			\cf6 TempoClock\cf0 .default.schedAbs(\cf6 TempoClock\cf0 .default.nextTimeOnGrid(0.125), \{\
				\cf6 Synth\cf0 (\cf7 \\memDrum\cf0 , [\cf7 \\tension\cf0 , 0.03, \cf7 \\loss\cf0 , 0.9995, \cf7 \\amp\cf0 , ~ctrnn.hiddenNode[1].output + 1 / 4]);\
			\});\
		\});\
		if ((~lastOutput2 - ~ctrnn.hiddenNode[6].output).abs > 0.5, \{\
			\cf6 TempoClock\cf0 .default.schedAbs(\cf6 TempoClock\cf0 .default.nextTimeOnGrid(0.125), \{\
				\cf6 Synth\cf0 (\cf7 \\memDrum\cf0 , [\cf7 \\tension\cf0 , 0.05, \cf7 \\loss\cf0 , 0.9995, \cf7 \\amp\cf0 , ~ctrnn.hiddenNode[2].output + 1 / 4]);\
			\});\
		\});\
		if ((~lastOutput3 - ~ctrnn.hiddenNode[7].output).abs > 0.5, \{\
			\cf6 TempoClock\cf0 .default.schedAbs(\cf6 TempoClock\cf0 .default.nextTimeOnGrid(0.125), \{\
				\cf6 Synth\cf0 (\cf7 \\memDrum\cf0 , [\cf7 \\tension\cf0 , 0.06, \cf7 \\loss\cf0 , 0.999, \cf7 \\amp\cf0 , ~ctrnn.hiddenNode[3].output + 1 / 4]);\
			\});\
		\});\
		~lastOutput1 = ~ctrnn.hiddenNode[5].output;\
		~lastOutput2 = ~ctrnn.hiddenNode[6].output;\
		~lastOutput3 = ~ctrnn.hiddenNode[7].output;\
		0.1.wait;\
	\};\
\}.fork;\
)\
\
\pard\pardeftab720
\cf8 //evolve from here:\
\pard\pardeftab720
\cf0 ~ctrnn.mutate(0.1, 0.0001);\
~ctrnn.mutateForward;\
\
~ctrnnLoop.stop;\
\
\
\pard\pardeftab720
\cf9 ///////////////////////////////////////////////////////////////////\
// a more complex synthesis examples\
\pard\pardeftab720
\cf0 \
(\
\pard\pardeftab720
\cf10 SynthDef\cf0 (\cf11 \\FourOscPad\cf0 , \cf11 \
\pard\pardeftab720
\cf0 \{\
	\cf10 |freq = 220, o1vol=1, o2vol=1, o3vol=1, o4vol=1, gate=1.0, amp=1.0,\
	o1detune = 0, o2detune = 0, o3detune = 0, o4detune = 0, \
	o1pw = 0.5, o2pw = 0.5, o3pw = 0.5, pwmFreq = 0,\
	fCutoff = 20000, fRes = 0, fLow = 1.0, fHigh = 0, fBand = 0, fNotch=0, fPeak = 0,\
	rFreq=20000, rRes=0, filtBal=0.5, filt1Pan=0, filt2Pan=0|\
\cf0 	\cf10 var\cf0  o1, o2, o3, o4, w, w2, aEnv,pwm;\
	pwm = \cf10 LFTri\cf0 .kr(pwmFreq, 0);\
	o1 = \cf10 LFPulse\cf0 .ar(freq * (1.0 + o1detune), 0, o1pw * pwm, o1vol);\
	o2 = \cf10 LFSaw\cf0 .ar(freq * (1.0 + o2detune), 0, o2pw * pwm, o2vol);\
	o3 = \cf10 VarSaw\cf0 .ar(freq * (1.0 + o3detune), 0, o3pw * pwm, o3vol);\
	o4 = \cf10 LFSaw\cf0 .ar(freq * (1.0 + o4detune), 0, o4vol);\
	w = o1 + o2 + o3 + o4 / (o1vol +o2vol +o3vol +o4vol);\
	w2 = \cf10 Resonz\cf0 .ar(w, rFreq, rRes);\
	//w = \cf12 LFNoise0\cf0 .ar(w, fCutoff, fRes, fLow, fBand, fHigh, fNotch, fPeak);\
	w = \cf10 Pan2\cf0 .ar(w, filt1Pan, filtBal) + \cf10 Pan2\cf0 .ar(w2, filt2Pan, 1-filtBal);\
	\cf10 Out\cf0 .ar(0, w);\
\}).store;\
)\
\
\pard\pardeftab720
\cf9 //play a major 7th chord\
\pard\pardeftab720
\cf0 ~all = ([30,34,37,41,42] + 24).collect(\{\cf10 |v,i|\cf0  \cf10 Synth\cf0 (\cf11 \\FourOscPad\cf0 , [\cf11 \\freq\cf0 , v.midicps, \cf11 \\aEnvA\cf0 , 3, \cf11 \\aEnvR\cf0 , 3])\});\
\
\pard\pardeftab720
\cf9 //init a ctrnn\
\pard\pardeftab720
\cf0 ~params = \cf10 CTRNNParams\cf0 .new;\
~params.timeStep = 0.01;\
~params.numInputNodes=0;\
~params.numHiddenNodes = 25;\
~params.hSinMixMax=1;\
\
(\
\pard\pardeftab720
\cf9 //try this block several times to hear some different results\
\pard\pardeftab720
\cf0 ~ctrnnLoop !? \{~ctrnnLoop.stop\};\
\pard\pardeftab720
\cf9 //make a random ctrnn\
\pard\pardeftab720
\cf0 ~ctrnn = \cf10 CTRNN\cf0 .new(~params);\
~ctrnnLoop = \{\
	\cf10 inf\cf0 .do \{\
		~ctrnn.update([]);\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\fCutoff\cf0 , [20,20000,\cf11 \\exp\cf0 ].asSpec.map(~ctrnn.hiddenNode[4].output + 1 / 2))\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o1Vol\cf0 , ~ctrnn.hiddenNode[0].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o2Vol\cf0 , ~ctrnn.hiddenNode[1].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o3Vol\cf0 , ~ctrnn.hiddenNode[2].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o4Vol\cf0 , ~ctrnn.hiddenNode[3].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o1detune\cf0 , [-0.01,0.01].asSpec.map(~ctrnn.hiddenNode[4].output + 1 / 2))\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o2detune\cf0 , [-0.01,0.01].asSpec.map(~ctrnn.hiddenNode[5].output + 1 / 2))\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o3detune\cf0 , [-0.01,0.01].asSpec.map(~ctrnn.hiddenNode[6].output + 1 / 2))\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o4detune\cf0 , [-0.01,0.01].asSpec.map(~ctrnn.hiddenNode[7].output + 1 / 2))\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o1pw\cf0 , ~ctrnn.hiddenNode[8].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o2pw\cf0 , ~ctrnn.hiddenNode[9].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o3pw\cf0 , ~ctrnn.hiddenNode[10].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\o4pw\cf0 , ~ctrnn.hiddenNode[11].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\rFilt\cf0 , [20,20000, \cf11 \\exp\cf0 ].asSpec.map(~ctrnn.hiddenNode[12].output + 1 / 2))\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\rRes\cf0 , ~ctrnn.hiddenNode[13].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\filtBal\cf0 , ~ctrnn.hiddenNode[14].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\filt1Pan\cf0 , ~ctrnn.hiddenNode[15].output)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\filt2Pan\cf0 , ~ctrnn.hiddenNode[16].output)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\fRes\cf0 , ~ctrnn.hiddenNode[17].output + 1 / 4 + 0.5)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\fLow\cf0 , ~ctrnn.hiddenNode[18].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\fHigh\cf0 , ~ctrnn.hiddenNode[19].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\fBand\cf0 , ~ctrnn.hiddenNode[20].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\fNotch\cf0 , ~ctrnn.hiddenNode[21].output + 1 / 2)\});\
		~all.do(\{\cf10 |v|\cf0  v.set(\cf11 \\fPeak\cf0 , ~ctrnn.hiddenNode[22].output + 1 / 2)\});\
		~params.timeStep.wait;\
	\};\
\}.fork;\
)\
\
\pard\pardeftab720
\cf9 //listen to mutations\
\pard\pardeftab720
\cf0 ~ctrnn.mutate(0.05, 0.0001);\
\pard\pardeftab720
\cf9 //move forward a generation\
\pard\pardeftab720
\cf0 ~ctnnn.mutateForward;\
\
\
~ctrnnLoop.stop;\
~all.do(\{\cf10 |v|\cf0  v.free\});\
}
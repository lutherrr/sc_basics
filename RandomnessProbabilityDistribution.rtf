{\rtf1\ansi\ansicpg1250\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red175\green35\blue29;\red0\green50\blue174;\red47\green106\blue36;
}
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\b\fs36 \cf0 Probability distributions
\b0 \
\
A probability distribution gives a relative weight to each available option in the space of possible outcomes; this is the 
\b probability density function (pdf)
\b0 . For a discrete set of possible outcomes, there is an explicit probability mass for each; for a continuous set (e.g., any number from the range 0.0 to 1.0) a mass can be associated with any 
\i interval
\i0 . The sum of the probability density is normalized to 1. \
\
From a probability density function we can create a 
\b cumulative distribution function (cdf)
\b0  which allows us to  calculate which output we get on a particular occasion (particular roll of the dice). \
\
\
\pard\pardeftab720\ql\qnatural
\cf2 //Helper functions for investigating pdfs and cdfs\
\pard\pardeftab720\ql\qnatural
\cf0 (\
\pard\pardeftab720\ql\qnatural
\cf2 //normalize total sum of an array to 1.0\
\pard\pardeftab720\ql\qnatural
\cf0 ~normalize = \{\cf3 |array|\cf0    array/(array.sum)\}; \cf2 //note, not safe if array is empty or otherwise sums to zero\
//(could also use normalizeSum, just showing this explicitly)\
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf2 //create array of cumulative values, assuming input is normalized (sums to 1.0)\
\pard\pardeftab720\ql\qnatural
\cf0 ~cumulative = \{\cf3 |array|\cf0  \
\pard\pardeftab720\ql\qnatural
\cf3 var\cf0  num = array.size; \
\cf3 var\cf0  accumulate = 0.0; \
\cf3 var\cf0  cumul; \
\
cumul = array.collect\{\cf3 |val, i|\cf0   var old= accumulate; accumulate = accumulate+val; old\};\
\
cumul\
\}; \
\
\pard\pardeftab720\ql\qnatural
\cf2 //use cumulative distribution to find an output value for an input\
//assumes array is a cumulative distribution function, and array size is at least 1\
\pard\pardeftab720\ql\qnatural
\cf0 ~draw= \{|input, array|\
\pard\pardeftab720\ql\qnatural
\cf3 var\cf0  nextindex;\
\
nextindex= array.indexOfGreaterThan(input); \cf2 //also see indexInBetween if want linearly interpolated index\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf2 //get nil if input greater than anything in array\
\pard\pardeftab720\ql\qnatural
\cf0 if (nextindex.isNil,\{nextindex= array.size;\});\
\
nextindex= nextindex-1; \cf2 //get index before; we 'went past' and have to go one back to find the slot our input falls in\
\
//nextindex should never be less than 0\
\cf0 \
nextindex/(array.size); \cf2 //get position proportional within array length\
\cf0 \}\
\
)\
\
\
\
\
Plotting approximations to different probability distributions:\
\
\
\pard\pardeftab720\ql\qnatural
\cf2 //1. Uniform distribution, equal chance for any equal subsection of the range:\
\pard\pardeftab720\ql\qnatural
\cf0 \
p= ~normalize.value(\cf3 Array\cf0 .fill(1000,1.0));\
\
p.plot2(minval:0.0, maxval:2.0/1000)  \cf2 //pdf\cf0 \
\
c= ~cumulative.value(p); \
\
c.plot2	\cf2 //cdf\cf0 \
\
\pard\pardeftab720\ql\qnatural
\cf3 Array\cf0 .fill(1000,\{ ~draw.value(1.0.rand, c)\}).sort.plot2 \cf2 //choose values; driven by uniform random number, could also just provide increasing uniform numbers from 0.0 to 1.0 (and then wouldn't need the sort) \
//we do this a thousand times to simulate 'rolling the dice' many times; the distribution only really shows itself over many trials (and can do it more times for better approximations)\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf3 Array\cf0 .fill(1000,\{ 1.0.rand \}).sort.plot2 \cf2 //create values directly	\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\ql\qnatural
\cf2 //2. Linear distribution, probability density drops linearly, so more likely to get lower values:\
\pard\pardeftab720\ql\qnatural
\cf0 \
p= ~normalize.value(\cf3 Array\cf0 .fill(1000,\{|i| 1000-i\}));\
\
p.plot2  \cf2 //pdf\cf0 \
\
c= ~cumulative.value(p); \
\
c.plot2	\cf2 //cdf\cf0 \
\
\pard\pardeftab720\ql\qnatural
\cf3 Array\cf0 .fill(1000,\{ ~draw.value(1.0.rand, c)\}).sort.plot2 \cf2 //choose values \cf0 \
\
\cf3 Array\cf0 .fill(1000,\{ 1.0.linrand \}).sort.plot2 \cf2 //create values directly	\cf0 \
\
\
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\ql\qnatural
\cf2 //3. Negative exponential distribution, probability density drops exponentially, so much more likely to get lower values:\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural
\cf2 //there is a parameter here for the rate of fall off of the distribution \
\pard\pardeftab720\ql\qnatural
\cf0 ~alpha= 10.0; \
\
p= ~normalize.value(\cf3 Array\cf0 .fill(1000,\{\cf3 |i|\cf0  exp((i.neg/1000)*~alpha) \})); \
\
p.plot2  \cf2 //pdf\cf0 \
\
c= ~cumulative.value(p); \
\
c.plot2	\cf2 //cdf\cf0 \
\
\pard\pardeftab720\ql\qnatural
\cf3 Array\cf0 .fill(1000,\{ ~draw.value(1.0.rand, c)\}).sort.plot2 \cf2 //choose values \cf0 \
\pard\pardeftab720\ql\qnatural
\cf2 \
\
//go back and try ~alpha= 100.0; note the quantisation caused by only working with arrays of limited size as we create a discrete approximation to the ideal continuous distribution\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\
\pard\pardeftab720\ql\qnatural
\cf2 //4. Normal distribution (Gaussian)\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf2 //two parameters, mean ('centre') and standard deviation ('spread'); here we take sensible values to plot the distribution easily\
\pard\pardeftab720\ql\qnatural
\cf0 \
~mu= 0.5; \cf2 //mean\cf0 \
~sigma=  0.17; \cf2 //standard deviation; most of probability mass within 3 standard deviations, so this makes the Gaussian fit the 0.0 to 1.0 range easily for our plotting; try changing these parameters later to see the effect. \
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf2 //normalization constant calculated automatically, though there is a mathematical expression for it\
\pard\pardeftab720\ql\qnatural
\cf0 p= ~normalize.value(\cf3 Array\cf0 .fill(1000,\{\cf3 |i|\cf0   exp((((i/1000)-~mu)/~sigma).squared.neg)\})); \
\
p.plot2  \cf2 //pdf\cf0 \
\
c= ~cumulative.value(p); \
\
c.plot2	\cf2 //cdf\cf0 \
\
\pard\pardeftab720\ql\qnatural
\cf3 Array\cf0 .fill(1000,\{ ~draw.value(1.0.rand, c)\}).sort.plot2 \cf2 //choose values \cf0 \
\
\cf3 Array\cf0 .fill(1000,\{  0.5.gauss(0.17).max(0.0).min(1.0)  \}).sort.plot2 \cf2 //create values directly, clamping within +-3 standard deviations	\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural
\cf2 //5. Arbitrary distribution\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural
\cf2 //let's make up our own function\
\pard\pardeftab720\ql\qnatural
\cf0 \
p= ~normalize.value(\cf3 Array\cf0 .fill(1000,\{\cf3 |i|\cf0   var prop= (i/1000.0); if(prop<0.2,\{(0.2-prop)**(0.3)\},\{(prop-0.2)**2\}) \})); \
\
p.plot2  \cf2 //pdf\cf0 \
\
c= ~cumulative.value(p); \
\
c.plot2	\cf2 //cdf\cf0 \
\
\pard\pardeftab720\ql\qnatural
\cf3 Array\cf0 .fill(1000,\{ ~draw.value(1.0.rand, c)\}).sort.plot2 \cf2 //choose values \cf0 \
\
\
\pard\pardeftab720\ql\qnatural
\cf2 //example in use; 20 notes drawn using the custom distribution (0.0 to 1.0 range output rescaled to MIDI notes 48 to 72)\
\pard\pardeftab720\ql\qnatural
\cf0 (\
	\{\
		20.do\{\
		\cf3 	Synth\cf0 (\cf4 \\acsound\cf0 ,[\cf4 \\freq\cf0 , 48+(24*~draw.value(1.0.rand, c))]); \
			\cf2 //could quantise the notes to discrete pitches, e.g., with .round(1.0)\
\cf0 			\
			0.25.wait;\
		\}\
	\}.fork;\
)\
\
\
\
\
There are many other interesting distributions you might investigate, see for example: \

\b Charles Ames. A catalog of statistical distributions: Techniques for transforming random, determinate and chaotic sequences. Leonardo Music Journal, 1(1):55\'9670, 1991. \
Denis Lorrain. A panoply of stochastic 'cannons'. Computer Music Journal, 41(1):53\'9681, 1980. 
\b0 \
\
\
\
\
In practice, we often work with a relatively small discrete set of options. It is easy to create a custom probability distribution over a set: \
\
[0,1,2,3,4,5].wchoose([0.2,0.3,0.1,0.1,0.05,0.25]) \cf2 //make sure weights add to 1.0, or use normalizeSum\cf0 \
\
\
\pard\pardeftab720\ql\qnatural
\cf2 //examination using our machinery for pdf, cdf, and draws:\
\pard\pardeftab720\ql\qnatural
\cf0 p= ~normalize.value([0.2,0.3,0.1,0.1,0.05,0.25]); \
\
p.plot2  \cf2 //pdf\cf0 \
\
c= ~cumulative.value(p); \
\
c.plot2	\cf2 //cdf\cf0 \
\
\pard\pardeftab720\ql\qnatural
\cf3 Array\cf0 .fill(1000,\{ ~draw.value(1.0.rand, c)*6\}).sort.plot2 \cf2 //choose values; multiply by 6 to get back integer indices \
}
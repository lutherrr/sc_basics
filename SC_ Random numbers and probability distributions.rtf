{\rtf1\ansi\ansicpg1250\cocoartf1038\cocoasubrtf360
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;\f2\fswiss\fcharset0 ArialMT;
\f3\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red160\green26\blue21;\red0\green37\blue170;\red0\green49\blue224;
\red41\green91\blue19;\red0\green40\blue160;\red58\green87\blue28;\red0\green36\blue165;\red50\green89\blue24;
\red44\green89\blue19;\red0\green38\blue172;\red128\green33\blue26;\red0\green39\blue163;\red77\green77\blue77;
\red57\green87\blue23;\red0\green43\blue157;\red115\green33\blue26;\red64\green85\blue28;\red0\green32\blue162;
\red129\green32\blue29;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}}
\deftab720
\pard\pardeftab720\ql\qnatural

\f0\b\fs36 \cf0 Basic Vocabulary: Generating values
\b0 \
\pard\pardeftab720\ql\qnatural

\fs24 \cf0 \
Before getting to the really cool things patterns can do, we need to build up a basic vocabulary. We'll start with some words, then move into phrases in the next tutorial.\
\
Some of the patterns will be demonstrated with a Pbind construct. This is a taste of things to come -- sequencing sonic events using patterns. Don't worry about how Pbind works just yet... all in good time.\
\
Let's start with a very quick reference of some basic patterns. More complete descriptions follow this list. The list might seem long at first, but concentrate your attention on patterns marked with a star. Those are the most basic, and commonly used. Again, the purpose is to start learning the vocabulary of patterns -- like learning new words when studying a human language.\
\
This document describes a lot of patterns, but what I call "primary patterns" are the most important. If you are new to patterns, concentrate on these first. You can always come back and look at the rest later.\
\
For more information on any of these patterns, select the class name and use the help key for your editor to open its help file.\
\
\
\pard\pardeftab720\ql\qnatural

\b\fs32 \cf0 Quick reference
\b0 \
\pard\pardeftab720\ql\qnatural

\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Primary Patterns
\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pseq(list, repeats, offset):
\b0  Play through the entire list 'repeats' times. Like list.do.\
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Prand(list, repeats):
\b0  Choose items from the list randomly (same as list.choose).\
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pxrand(list, repeats):
\b0  Choose randomly, but never repeat the same item twice.\
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pshuf(list, repeats):
\b0  Shuffle the list in random order, and use the same random order 'repeats' times. Like list.scramble.\
\ls1\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pwrand(list, weights, repeats):
\b0  Choose randomly by weighted probabilities (like list.wchoose(weights)).\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls2\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pseries(start, step, length):
\b0  Arithmetic series (addition).\
\ls2\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pgeom(start, grow, length):
\b0  Geometric series (multiplication).\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls3\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pwhite(lo, hi, length):
\b0  Random numbers, equal distribution ("white noise"). Like rrand(lo, hi).\
\ls3\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pexprand(lo, hi, length):
\b0  Random numbers, exponential distribution. Like exprand(lo, hi).\
\ls3\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pbrown(lo, hi, step, length):
\b0  Brownian motion, arithmetic scale (addition).\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls4\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pfunc(nextFunc, resetFunc):
\b0  Get the stream values from a user-supplied function.\
\ls4\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Pfuncn(func, repeats):
\b0  Get values from the function, but stop after 'repeats' items.\
\ls4\ilvl0
\b \cf2 {\listtext	\'95	}* \cf0 Proutine(routineFunc):
\b0  Use the function like a routine. The function should return values using .yield or .embedInStream.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Additional List Patterns
\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls5\ilvl0
\b \cf0 {\listtext	\'95	}Pser(list, repeats, offset):
\b0  Play through the list as many times as needed, but output only 'repeats' items.\
\ls5\ilvl0
\b {\listtext	\'95	}Pslide(list, repeats, len, step, start, wrapAtEnd):
\b0  Play overlapping segments from the list.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls6\ilvl0
\b \cf0 {\listtext	\'95	}Pwalk(list, stepPattern, directionPattern, startPos):
\b0  Random walk over the list.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls7\ilvl0
\b \cf0 {\listtext	\'95	}Place(list, repeats, offset):
\b0  Interlace any arrays found in the main list.\
\ls7\ilvl0
\b {\listtext	\'95	}Ppatlace(list, repeats, offset):
\b0  Interlace any patterns found in the main list.\
\ls7\ilvl0
\b {\listtext	\'95	}Ptuple(list, repeats):
\b0  Collect the list items into an array as the return value.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Additional Random Number Generators
\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls8\ilvl0
\b \cf0 {\listtext	\'95	}Pgbrown(lo, hi, step, length):
\b0  Brownian motion, geometric scale (multiplication).\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls9\ilvl0
\b \cf0 {\listtext	\'95	}Pbeta(lo, hi, prob1, prob2, length):
\b0  Beta distribution, where prob1 = \uc0\u945  (alpha) and prob2 = \u946  (beta).\
\ls9\ilvl0
\b {\listtext	\'95	}Pcauchy(mean, spread, length):
\b0  Cauchy distribution.\
\ls9\ilvl0
\b {\listtext	\'95	}Pgauss(mean, dev, length):
\b0  Guassian (normal) distribution.\
\ls9\ilvl0
\b {\listtext	\'95	}Phprand(lo, hi, length):
\b0  Returns the greater of two equal-distribution random numbers.\
\ls9\ilvl0
\b {\listtext	\'95	}Plprand(lo, hi, length):
\b0  Returns the lesser of two equal-distribution random numbers.\
\ls9\ilvl0
\b {\listtext	\'95	}Pmeanrand(lo, hi, length):
\b0  Returns the average of two equal-distribution random numbers, i.e., (x +  y) / 2.\
\ls9\ilvl0
\b {\listtext	\'95	}Ppoisson(mean, length):
\b0  Poisson distribution.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls10\ilvl0
\b \cf0 {\listtext	\'95	}Pprob(distribution, lo, hi, length, tableSize):
\b0  Arbitrary distribution, based on a probability table.\
\pard\tx560\pardeftab720\ql\qnatural
\cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Random numbers and probability distributions
\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls11\ilvl0
\b \cf0 {\listtext	\'95	}Pwhite(lo, hi, length):
\b0  Produces 'length' random numbers with equal distribution ('white' refers to white noise).\
\ls11\ilvl0
\b {\listtext	\'95	}Pexprand(lo, hi, length):
\b0  Same, but the random numbers have an exponential distribution, favoring lower numbers. This is good for frequencies, and also durations (because you need more notes with a shorter duration to balance the weight of longer notes).\
\ls11\ilvl0
\b {\listtext	\'95	}Pbrown(lo, hi, step, length):
\b0  Brownian motion. Each value adds a random step to the previous value, where the step has an equal distribution between -step and +step.\
\ls11\ilvl0
\b {\listtext	\'95	}Pgbrown(lo, hi, step, length):
\b0  Brownian motion on a geometric scale. Each value multiplies a random step factor to the previous value.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls12\ilvl0
\b \cf0 {\listtext	\'95	}Pbeta(lo, hi, prob1, prob2, length):
\b0  Beta distribution, where prob1 = \uc0\u945  (alpha) and prob2 = \u946  (beta).\
\ls12\ilvl0
\b {\listtext	\'95	}Pcauchy(mean, spread, length):
\b0  Cauchy distribution.\
\ls12\ilvl0
\b {\listtext	\'95	}Pgauss(mean, dev, length):
\b0  Guassian (normal) distribution.\
\ls12\ilvl0
\b {\listtext	\'95	}Phprand(lo, hi, length):
\b0  Returns the greater of two equal-distribution random numbers.\
\ls12\ilvl0
\b {\listtext	\'95	}Plprand(lo, hi, length):
\b0  Returns the lesser of two equal-distribution random numbers.\
\ls12\ilvl0
\b {\listtext	\'95	}Pmeanrand(lo, hi, length):
\b0  Returns the average of two equal-distribution random numbers, i.e., (x + y) / 2.\
\ls12\ilvl0
\b {\listtext	\'95	}Ppoisson(mean, length):
\b0  Poisson distribution.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls13\ilvl0
\b \cf0 {\listtext	\'95	}Pprob(distribution, lo, hi, length, tableSize):
\b0  Given an array of relative probabilities across the desired range (a histogram) representing an arbitrary distribution, generates random numbers corresponding to that distribution.\
\pard\pardeftab720\ql\qnatural
\cf0 \
To see a distribution, make a histogram out of it.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls14\ilvl0
\b \cf0 Pwhite
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;
\f0\fs24 \
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf3 Pmeanrand\cf0 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\pard\pardeftab720\ql\qnatural

\f0\b\fs24 \cf0 Pexprand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\pard\pardeftab720\ql\qnatural
\cf3 P
\f0\b\fs24 \cf0 brown
\f1\b0\fs18 (0.0, 1.0, 0.1, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 gbrown
\f1\b0\fs18 (0.0, 1.0, 0.1, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 beta
\f1\b0\fs18 (0.0, 1.0, 1, 3, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 cauchy
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 hprand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 lprand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 meanrand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 poisson
\f1\b0\fs18 (0.0001, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 prob
\f1\b0\fs18 ((\cf3 P
\f0\b\fs24 \cf0 meanrand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0))
\f0\b\fs24 , 
\f1\b0\fs18 0.0, 1.0, \cf3 inf, 100\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 meanrand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;
\f0\fs24 \
\
\
\pard\pardeftab720\ql\qnatural

\b\fs32 \cf0 Functional descriptions of patterns
\b0 \
\pard\pardeftab720\ql\qnatural

\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b\fs28 \cf0 List Patterns
\b0 \
\pard\pardeftab720\ql\qnatural

\fs24 \cf0 \
The most obvious thing one would want to do with a pattern is to give it a list of values and have it read them out in order. You have a couple of choices, which differ in their handling of the 'repeats' parameter.\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Pseq(list, repeats, offset):
\b0  Play through the entire list 'repeats' times.\

\b Pser(list, repeats, offset):
\b0  Play through the list as many times as needed, but output only 'repeats' items.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf3 Pseq\cf0 (#[1, 2, 3], 4).asStream.all;	\cf2 // 12 items = 4 repeats * 3 items\
\cf3 Pser\cf0 (#[1, 2, 3], 4).asStream.all;	\cf2 // 4 items only\cf0 \
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural
{\field{\*\fldinst{HYPERLINK "http://help.sccode.org/Streams-Patterns-Events/Patterns/Pseq.html"}}{\fldrslt \cf4 \ul \ulc4 Pseq}} is an obvious choice for streaming out known pitch and rhythm values.\
\
Before playing a Pbind pattern such as this, make sure the server is booted.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf0 s.boot;\
\
(\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Pseq\cf0 (#[0, 0, 4, 4, 5, 5, 4], 1),\
	\cf5 \\dur\cf0 , \cf3 Pseq\cf0 (#[0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 1], 1)\
).play;\
)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
To stop the examples in this file, use the "stop" keyboard shortcut (cmd-. on Mac OSX, alt-. on Windows, check documentation for other editors). Or:\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf0 p.stop;\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
A variation, {\field{\*\fldinst{HYPERLINK "http://help.sccode.org/Streams-Patterns-Events/Patterns/Pslide.html"}}{\fldrslt \cf3 Pslide}}, plays overlapping segments of the input list.\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Pslide(list, repeats, len, step, start, wrapAtEnd)
\b0 \
repeats: 	number of segments\
len:		length of each segment\
step:		is how far to step the start of each segment from previous.\
start:		what index to start at.\
wrapAtEnd: if true (default), indexing wraps around if goes past beginning or end. If false, the pattern stops if it hits a nil element or goes outside the list bounds.\
\
If step == 1, then the first segment is at 'start', the second at 'start' + 1, and so on.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf3 Pslide\cf0 (#[1, 2, 3, 4, 5, 6, 7, 8], 10, 3, 1, 0, \cf3 false\cf0 ).asStream.all;\
\
\pard\pardeftab720\ql\qnatural
\cf2 // or, to show the segments as separate arrays\
\pard\pardeftab720\ql\qnatural
\cf3 Pslide\cf0 (#[1, 2, 3, 4, 5, 6, 7, 8], 10, 3, 1, 0, \cf3 false\cf0 ).clump(3).asStream.all;\
\
\pard\pardeftab720\ql\qnatural
\cf2 // Flock of Seagulls!\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Pslide\cf0 ((-6, -4 .. 12), 8, 3, 1, 0),\
	\cf5 \\dur\cf0 , \cf3 Pseq\cf0 (#[0.1, 0.1, 0.2], \cf3 inf\cf0 ),\
	\cf5 \\sustain\cf0 , 0.15\cf5 \
\cf0 ).play;\
)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Random-order list patterns
\b0 \
\

\b Prand(list, repeats):
\b0  Choose items from the list randomly (same as list.choose).\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf2 // Prand: given scale degrees (pentatonic) with equal probability of each\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Prand\cf0 ([0, 1, 2, 4, 5], \cf3 inf\cf0 ),\
	\cf5 \\dur\cf0 , 0.25\
).play;\
)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Pxrand(list, repeats):
\b0  Choose randomly, but never repeat the same item twice in immediate succession.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf2 // Pxrand: same as above but never repeats a pitch twice in a row\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Pxrand\cf0 ([0, 1, 2, 4, 5], \cf3 inf\cf0 ),\
	\cf5 \\dur\cf0 , 0.25\
).play;\
)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Pshuf(list, repeats):
\b0  Shuffle the list in random order, and use the same random order 'repeats' times. Like list.scramble.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf2 // Pshuf: randomly ordered once and repeated\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Pshuf\cf0 ([0, 1, 2, 4, 5], \cf3 inf\cf0 ),\
	\cf5 \\dur\cf0 , 0.25\
).play;\
)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Pwrand(list, weights, repeats):
\b0  Choose randomly, according to weighted probabilities (same as list.wchoose(weights)).\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf2 // Pwrand: these probabilities favor triadic notes from scale degrees\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Noise\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Pwrand\cf0 ((0..7), [4, 1, 3, 1, 3, 2, 1].normalizeSum, \cf3 inf\cf0 ),\
	\cf5 \\dur\cf0 , 0.25\
).play;\
)\
\
\
\pard\pardeftab720\ql\qnatural

\f2\b\fs28 \cf0 PIANO PGBROWN DISTRIBUTION\
\pard\pardeftab720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 (\
\pard\pardeftab560\ql\qnatural
\cf6 SynthDef\cf0 (\cf7 \\help_mdapiano\cf0 , \{ \cf6 |out=0, freq=440, gate=1|\
\pard\pardeftab560\ql\qnatural
\cf0 	\cf6 var\cf0  son = \cf6 MdaPiano\cf0 .ar(freq, gate, release: 0.9, stereo: 0.3, sustain: 0);\
	\cf6 DetectSilence\cf0 .ar(son, 0.01, doneAction:2);\
	\cf6 Out\cf0 .ar(out, son * 0.1);\
\}).add;\
)\
\
(\
\pard\pardeftab560\ql\qnatural
\cf8 TempoClock\cf0 .default.tempo = 1.2;\
\cf8 Ppar\cf0 ([\cf8 \
\pard\pardeftab560\ql\qnatural
\cf0 	\cf8 Pbind\cf0 (\cf8 \
\cf0 		\cf9 \\instrument\cf0 , \cf9 \\help_mdapiano\cf0 ,\cf9 \
\cf0 		\cf10 \\midinote\cf0 , \cf11 Pgbrown\cf0 (48, 72, 0.5, \cf11 inf\cf0 ).round,\
	\cf10 \\dur\cf0 , 0.2,\
		\cf9 \\octave\cf0 , 3, \
		\cf9 \\root\cf0 , 3,\
		\cf9 \\vel\cf0 , \cf11 Pgbrown\cf0 (48, 72, 0.5, \cf11 inf\cf0 ).round,\
		\cf9 \\legato\cf0 , 0.95\
	),\
	\cf8 Pbind\cf0 (\cf8 \
\cf0 		\cf9 \\instrument\cf0 , \cf9 \\help_mdapiano\cf0 ,\cf9 \
\cf0 	\cf10 \\midinote\cf0 , \cf11 Pgbrown\cf0 (24, 36, 0.5, \cf11 inf\cf0 ).round,\
	\cf10 \\dur\cf0 , 0.2,\
		\cf9 \\octave\cf0 , 6, \
		\cf9 \\root\cf0 , 3,\
		\cf9 \\vel\cf0 , \cf11 Pgbrown\cf0 (24, 36, 0.5, \cf11 inf\cf0 ).round\
	)\
], \cf8 inf\cf0 ).play\
)\
\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Pwalk(list, stepPattern, directionPattern, startPos):
\b0  Random walk over the list. This pattern is a bit more complicated; see its help file for details.\
\
\
\pard\pardeftab720\ql\qnatural

\b\fs28 \cf0 Interlacing values and making arrays
\b0 \
\pard\pardeftab720\ql\qnatural

\fs24 \cf0 \
These are opposing operations: interlacing means splitting arrays and merging them into a stream of single values, and arrays can be made out of single-value streams as well.\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Place(list, repeats, offset):
\b0  Take one from each item in the main array item in succession. Hard to explain, easier to see:\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf0 Place([0, [1, 2], [3, 4, 5]], 3).asStream.all;\
--> [ 0, 1, 3, 0, 2, 4, 0, 1, 5 ]\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
If we turn this into a matrix and read vertically, the original arrays are clearly visible:\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf3 Place\cf0 ([0, [1, 2], [3, 4, 5]], 3).clump(3).do(\cf3 _\cf0 .postln);\
\
[ 0, 1, 3 ]	\cf2 // leftmost column: 0 from first Place item\
\cf0 [ 0, 2, 4 ]	\cf2 // second column: alternates between 1 and 2, from second Place item\
\cf0 [ 0, 1, 5 ]	\cf2 // third column: 3, 4, 5 from third Place item\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Ppatlace(list, repeats, offset):
\b0  Take one value from each sub-pattern in order.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf2 // Hanon exercise\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Ppatlace\cf0 ([\cf3 \
\cf0 		\cf3 Pseries\cf0 (0, 1, 8),		\cf2 // first, third etc. notes\
\cf0 		\cf3 Pseries\cf0 (2, 1, 7)		\cf2 // second, fourth etc. notes\
\cf0 	], \cf3 inf\cf0 ),\
	\cf5 \\dur\cf0 , 0.25\
).play;\
)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
That's also a taste of things to come: Patterns can be nested.\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Ptuple(list, repeats):
\b0  Get one value from each item in the array, and return all of them as an array of values.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf2 // Chords\
// \\degree receives [7, 9, 4], then [6, 7, 4] successively, expanded to chords on the server\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Ptuple\cf0 ([\cf5 \
\cf0 		\cf3 Pseries\cf0 (7, -1, 8),\
		\cf3 Pseq\cf0 ([9, 7, 7, 7, 4, 4, 2, 2], 1),\
		\cf3 Pseq\cf0 ([4, 4, 4, 2, 2, 0, 0, -3], 1)\
	], 1),\
	\cf5 \\dur\cf0 , 1\
).play;\
)\
\
\
\pard\pardeftab720\ql\qnatural

\f0\b\fs24 \cf0 Ptuple(list, repeats):
\b0  Get one value from each item in the array, and return all of them as an array of values.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf2 // Chords\
// \\degree receives [7, 9, 4], then [6, 7, 4] successively, expanded to chords on the server\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Ptuple\cf0 ([\cf5 \
\cf0 		\cf3 Pseries\cf0 (7, -1, 8),\
		\cf3 Pseq\cf0 ([9, 7, 7, 0.068047149782946, 0.097609503892181, 2, 2], 1),\
		\cf3 Pseq\cf0 ([4, 4, 4, 0.17145443631153, 0.18544098027668, 0.19847170532612], 1)\
	], 1),\
	\cf5 \\dur\cf0 , 1\
).play;\
)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b\fs28 \cf0 Generating values
\b0 \
\pard\pardeftab720\ql\qnatural

\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Arithmetic and geometric series
\b0 \
\
Now, let's move to patterns that produce values mathematically, without using a predefined list.\
\

\b Pseries(start, step, length):
\b0  Arithmetic series, successively adding 'step' to the starting value, returning a total of 'length' items.\

\b Pgeom(start, grow, length):
\b0  Geometric series, successively multiplying the current value by 'grow'.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf2 // Use Pseries for a scale and Pgeom for an accelerando\
\pard\pardeftab720\ql\qnatural
\cf0 (\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Pseries\cf0 (-7, 1, 15),\
	\cf5 \\dur\cf0 , \cf3 Pgeom\cf0 (0.5, 0.89140193218427, 15)\
).play;\
)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b \cf0 Third-party extension alert:
\b0  If you want an arithmetic or geometric series to start at one number and end at another specific number, the step size/multiplier must be calculated from the endpoints and the number of items desired. The ddwPatterns quark includes a convenience method, 
\b fromEndpoints
\b0 , for both Pseries and Pgeom that performs this calculation. It's necessary to give an exact number of repeats, at least two and less than infinity.\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf0 p = \cf3 Pgeom\cf0 .fromEndpoints(0.5, 0.1, 15);	\cf2 // error if ddwPatterns not installed\
\cf0 p.postcs;\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
Prints:\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf0 Pgeom(0.5, 0.89140193218427, 15)\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Random numbers and probability distributions
\b0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls15\ilvl0
\b \cf0 {\listtext	\'95	}Pwhite(lo, hi, length):
\b0  Produces 'length' random numbers with equal distribution ('white' refers to white noise).\
\ls15\ilvl0
\b {\listtext	\'95	}Pexprand(lo, hi, length):
\b0  Same, but the random numbers have an exponential distribution, favoring lower numbers. This is good for frequencies, and also durations (because you need more notes with a shorter duration to balance the weight of longer notes).\
\ls15\ilvl0
\b {\listtext	\'95	}Pbrown(lo, hi, step, length):
\b0  Brownian motion. Each value adds a random step to the previous value, where the step has an equal distribution between -step and +step.\
\ls15\ilvl0
\b {\listtext	\'95	}Pgbrown(lo, hi, step, length):
\b0  Brownian motion on a geometric scale. Each value multiplies a random step factor to the previous value.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls16\ilvl0
\b \cf0 {\listtext	\'95	}Pbeta(lo, hi, prob1, prob2, length):
\b0  Beta distribution, where prob1 = \uc0\u945  (alpha) and prob2 = \u946  (beta).\
\ls16\ilvl0
\b {\listtext	\'95	}Pcauchy(mean, spread, length):
\b0  Cauchy distribution.\
\ls16\ilvl0
\b {\listtext	\'95	}Pgauss(mean, dev, length):
\b0  Guassian (normal) distribution.\
\ls16\ilvl0
\b {\listtext	\'95	}Phprand(lo, hi, length):
\b0  Returns the greater of two equal-distribution random numbers.\
\ls16\ilvl0
\b {\listtext	\'95	}Plprand(lo, hi, length):
\b0  Returns the lesser of two equal-distribution random numbers.\
\ls16\ilvl0
\b {\listtext	\'95	}Pmeanrand(lo, hi, length):
\b0  Returns the average of two equal-distribution random numbers, i.e., (x + y) / 2.\
\ls16\ilvl0
\b {\listtext	\'95	}Ppoisson(mean, length):
\b0  Poisson distribution.\
\pard\pardeftab720\ql\qnatural
\cf0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls17\ilvl0
\b \cf0 {\listtext	\'95	}Pprob(distribution, lo, hi, length, tableSize):
\b0  Given an array of relative probabilities across the desired range (a histogram) representing an arbitrary distribution, generates random numbers corresponding to that distribution.\
\pard\pardeftab720\ql\qnatural
\cf0 \
To see a distribution, make a histogram out of it.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls18\ilvl0
\b \cf0 Pwhite
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;
\f0\fs24 \
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf3 Pmeanrand\cf0 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 exprand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 brown
\f1\b0\fs18 (0.0, 1.0, 0.1, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 gbrown
\f1\b0\fs18 (0.0, 1.0, 0.1, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 beta
\f1\b0\fs18 (0.0, 1.0, 1, 3, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 cauchy
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 hprand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 lprand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 meanrand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 poisson
\f1\b0\fs18 (0.0001, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 prob
\f1\b0\fs18 ((\cf3 P
\f0\b\fs24 \cf0 meanrand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0))
\f0\b\fs24 , 
\f1\b0\fs18 0.0, 1.0, \cf3 inf, 100\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\cf3 P
\f0\b\fs24 \cf0 meanrand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000).histo(200, 0.0, 1.0).plot;\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls19\ilvl0\cf0 \
\pard\pardeftab720\ql\qnatural
\ls19\ilvl0\cf0 \
\
\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\ql\qnatural
\ls19\ilvl0\cf0 \
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\f1\fs38 \cf3 M\
\pard\pardeftab720\ql\qnatural

\fs18 \cf3 \
P
\f0\b\fs24 \cf0 brown
\f1\b0\fs18 (0.0, 1.0, 0.1, \cf3 inf\cf0 ).asStream.nextN(100)\
\
(\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Ppatlace\cf0 ([\cf3 \
\cf0 		 0.76495883464813, 0.79431092739105, 0.84242269992828, 0.85245070457458, 0.91813497543335, 0.9447732925415, 0.99615490436554, 0.98666462898254, 0.94673218727112, 0.99808065891266, 0.93810284137726, 0.92610540390015, 0.97790050506592, 0.96269376277924, 0.88132109642029, 0.97059926986694, 0.94373598098755, 0.99126493930817, 0.95556571483612, 0.94604728221893, 0.90615334510803, 0.81338424682617, 0.89738013744354, 0.9719605922699, 0.8831235408783, 0.81825168132782, 0.74042339324951, 0.64816992282867		\cf2 // second, fourth etc. notes\
\cf0 	], \cf3 inf\cf0 ),\
	\cf5 \\dur\cf0 , 0.25\
).play;\
)\
=====\
\pard\pardeftab720\ql\qnatural

\f2\b\fs28 \cf0 UWAGA! PIANO PBROWN DISTRIBUTION\
\pard\pardeftab720\ql\qnatural

\f1\b0\fs18 \cf0 \
\pard\pardeftab560\ql\qnatural
\cf0 (\
\pard\pardeftab560\ql\qnatural
\cf6 SynthDef\cf0 (\cf7 \\help_mdapiano\cf0 , \{ \cf6 |out=0, freq=440, gate=1|\
\pard\pardeftab560\ql\qnatural
\cf0 	\cf6 var\cf0  son = \cf6 MdaPiano\cf0 .ar(freq, gate, release: 0.9, stereo: 0.3, sustain: 0);\
	\cf6 DetectSilence\cf0 .ar(son, 0.01, doneAction:2);\
	\cf6 Out\cf0 .ar(out, son * 0.1);\
\}).add;\
)\
\
(\
\pard\pardeftab560\ql\qnatural
\cf8 TempoClock\cf0 .default.tempo = 1.2;\
\cf8 Ppar\cf0 ([\cf8 \
\pard\pardeftab560\ql\qnatural
\cf0 	\cf8 Pbind\cf0 (\cf8 \
\cf0 		\cf9 \\instrument\cf0 , \cf9 \\help_mdapiano\cf0 ,\cf9 \
\cf0 		\cf10 \\midinote\cf0 , \cf11 Pbrown\cf0 (24, 36, 0.5, \cf11 inf\cf0 ).round,\
	\cf10 \\dur\cf0 , 0.2,\
		\cf9 \\octave\cf0 , 3, \
		\cf9 \\root\cf0 , 3,\
		\cf9 \\vel\cf0 , \cf8 Pwhite\cf0 (50, 100, \cf8 inf\cf0 ),\
		\cf9 \\legato\cf0 , 0.95\
	)\
], \cf8 inf\cf0 ).play\
)\
\pard\pardeftab720\ql\qnatural
\cf0 \
===========\
\pard\pardeftab560\ql\qnatural

\f0\b\fs24 \cf0 Pwhite(lo, hi, length)
\b0 \
		\
		
\b lo, hi	
\b0 		lower and upper boundary of values (default: 0.0 and 1.0)\
		
\b length
\b0 		number of values produced  (default: inf)\
\pard\pardeftab560\ql\qnatural

\f1\fs18 \cf0 \

\f2\b\fs28 PIANO PWHITE DISTRIBUTION
\f1\b0\fs18 \
\
(\
\pard\pardeftab560\ql\qnatural
\cf6 SynthDef\cf0 (\cf7 \\help_mdapiano\cf0 , \{ \cf6 |out=0, freq=440, gate=1|\
\pard\pardeftab560\ql\qnatural
\cf0 	\cf6 var\cf0  son = \cf6 MdaPiano\cf0 .ar(freq, gate, release: 0.9, stereo: 0.3, sustain: 0);\
	\cf6 DetectSilence\cf0 .ar(son, 0.01, doneAction:2);\
	\cf6 Out\cf0 .ar(out, son * 0.1);\
\}).add;\
)\
\
(\
\pard\pardeftab560\ql\qnatural
\cf8 TempoClock\cf0 .default.tempo = 1.2;\
\cf8 Ppar\cf0 ([\cf8 \
\pard\pardeftab560\ql\qnatural
\cf0 	\cf8 Pbind\cf0 (\cf8 \
\cf0 		\cf9 \\instrument\cf0 , \cf9 \\help_mdapiano\cf0 ,\cf9 \
\cf0 		\cf10 \\midinote\cf0 , \cf8 Pwhite\cf0 (50, 100, \cf8 inf\cf0 ),\
	\cf10 \\dur\cf0 , 0.2,\
		\cf9 \\octave\cf0 , 3, \
		\cf9 \\root\cf0 , 3,\
		\cf9 \\vel\cf0 , \cf8 Pwhite\cf0 (50, 100, \cf8 inf\cf0 ),\
		\cf9 \\legato\cf0 , 0.95\
	)\
], \cf8 inf\cf0 ).play\
)
\f0\fs24 	\

\f1\fs18 		\
\
\pard\pardeftab560\ql\qnatural
\cf12 // example\
\pard\pardeftab560\ql\qnatural
\cf0 \
\
(\
\pard\pardeftab560\ql\qnatural
\cf13 var\cf0  a;\
a = \cf13 Pwhite\cf0 (0.0, 1.0, \cf13 inf\cf0 );\
c = a.asStream.nextN(500);\
w = \cf13 Window\cf0 .new(\cf14 "Pwhite"\cf0 , \cf13 Rect\cf0 (10, 10, 540, 800));\
\pard\pardeftab560\ql\qnatural
\cf12 // plot the values\
\pard\pardeftab560\ql\qnatural
\cf0 c.plot(bounds: \cf13 Rect\cf0 (10, 10, 520, 380), discrete: \cf13 true\cf0 , parent: w);\
\pard\pardeftab560\ql\qnatural
\cf12 // a histogram of the values\
\pard\pardeftab560\ql\qnatural
\cf0 c.histo(500).plot(bounds: \cf13 Rect\cf0 (10, 410, 520, 380), parent: w);\
)\
\
(\
\pard\pardeftab560\ql\qnatural
\cf13 var\cf0  a;\
a = \cf13 Pwhite\cf0 (0.0, 1.0, \cf13 inf\cf0 );\
a.asStream.nextN(1000).plot;\
)\
\
\
\pard\pardeftab560\ql\qnatural
\cf12 // sound example\
\pard\pardeftab560\ql\qnatural
\cf0 (\
\pard\pardeftab560\ql\qnatural
\cf13 SynthDef\cf0 (\cf15 \\help_sinegrain\cf0 , \cf15 \
\pard\pardeftab560\ql\qnatural
\cf0 	\{ \cf13 arg\cf0  out=0, freq=440, sustain=0.05;\
		\cf13 var\cf0  env;\
		env = \cf13 EnvGen\cf0 .kr(\cf13 Env\cf0 .perc(0.01, sustain, 0.2), doneAction:2);\
		\cf13 Out\cf0 .ar(out, \cf13 SinOsc\cf0 .ar(freq, 0, env))\
	\}).send(s);\
)\
\
\
(\
\pard\pardeftab560\ql\qnatural
\cf13 var\cf0  a;\
a = \cf13 Pwhite\cf0 (0.0, 1.0, \cf13 inf\cf0 ).asStream;\
\{\
	loop \{\
		\cf13 Synth\cf0 (\cf15 \\help_sinegrain\cf0 , [\cf15 \\freq\cf0 , a.next * 200 + 300]);\
		0.02.wait;\
	\}\
\}.fork;\
)\
\
\pard\pardeftab560\ql\qnatural
\cf12 // this is equivalent to:\
\pard\pardeftab560\ql\qnatural
\cf0 (\
\{\
	loop \{\
		\cf13 Synth\cf0 (\cf15 \\help_sinegrain\cf0 , [\cf15 \\freq\cf0 , rrand(0.0, 1.0) * 600 + 300]);\
		0.02.wait;\
	\}\
\}.fork;\
)\
\
\
\
\
\
\
\
\pard\pardeftab720\ql\qnatural
\cf0 \
===Pbrown\
\pard\pardeftab560\ql\qnatural
\cf0 (\
\pard\pardeftab560\ql\qnatural
\cf16 var\cf0  a;\
a = \cf16 Pbrown\cf0 (0.0, 1.0, 0.1, \cf16 inf\cf0 );\
c = a.asStream.nextN(500);\
w = \cf16 Window\cf0 .new(\cf14 "Pbrown"\cf0 , \cf16 Rect\cf0 (10, 10, 540, 800));\
\cf17 // plot the values\
\pard\pardeftab560\ql\qnatural
\cf0 c.plot(bounds: \cf16 Rect\cf0 (10, 10, 520, 380), discrete: \cf16 true\cf0 , parent: w);\
\pard\pardeftab560\ql\qnatural
\cf17 // a histogram of the values\
\pard\pardeftab560\ql\qnatural
\cf0 c.histo(500).plot(bounds: \cf16 Rect\cf0 (10, 410, 520, 380), parent: w);\
)\
\
(\
\pard\pardeftab560\ql\qnatural
\cf16 var\cf0  a;\
a = \cf16 Pbrown\cf0 (0.0, 1.0, 0.2, \cf16 inf\cf0 );\
a.asStream.nextN(1000).plot;\
)\
\
\
\cf17 // sound example\
\pard\pardeftab560\ql\qnatural
\cf0 (\
\pard\pardeftab560\ql\qnatural
\cf16 SynthDef\cf0 (\cf18 \\help_sinegrain\cf0 , \cf18 \
\pard\pardeftab560\ql\qnatural
\cf0 	\{ \cf16 arg\cf0  out=0, freq=440, sustain=0.05;\
		\cf16 var\cf0  env;\
		env = \cf16 EnvGen\cf0 .kr(\cf16 Env\cf0 .perc(0.01, sustain, 0.2), doneAction:2);\
		\cf16 Out\cf0 .ar(out, \cf16 SinOsc\cf0 .ar(freq, 0, env))\
	\}).send(s);\
)\
\
\
(\
\pard\pardeftab560\ql\qnatural
\cf16 var\cf0  a;\
a = \cf16 Pbrown\cf0 (0.0, 1.0, 0.1, \cf16 inf\cf0 ).asStream;\
\{\
	loop \{\
		\cf16 Synth\cf0 (\cf18 \\help_sinegrain\cf0 , [\cf18 \\freq\cf0 , a.next * 600 + 300]);\
		0.02.wait;\
	\}\
\}.fork;\
)\
\
\
\
\cf17 // parallel browninan motions\
\pard\pardeftab560\ql\qnatural
\cf0 (\
\pard\pardeftab560\ql\qnatural
\cf16 var\cf0  a, x, f;\
a = \cf16 Pbrown\cf0 (0.0, 1.0, 0.1, \cf16 inf\cf0 );\
\
f = \{ \cf16 |pattern, dt=0.02, min=300, max=900|\
\pard\pardeftab560\ql\qnatural
\cf0 	\{\
		\cf16 var\cf0  x = pattern.asStream;\
		loop \{\
			\cf16 Synth\cf0 .grain(\cf18 \\help_sinegrain\cf0 , [\cf18 \\freq\cf0 , x.next.linexp(0, 1, min, max), \cf18 \\sustain\cf0 , dt]);\
			dt.wait;\
		\}\
	\}.fork;\
\}.flop;\
\
\pard\pardeftab560\ql\qnatural
\cf17 // 3 parallel motions\
\pard\pardeftab560\ql\qnatural
\cf0 f.(a, [0.02, 0.08, 0.16]);\
)\
\pard\pardeftab720\ql\qnatural
\cf0 \
\
\
\
\
\
\
\cf3 P
\f0\b\fs24 \cf0 lprand
\f1\b0\fs18 (0.0, 1.0, \cf3 inf\cf0 ).asStream.nextN(10000)\
\
(\
p = \cf3 Pbind\cf0 (\
	\cf5 \\degree\cf0 , \cf3 Ppatlace\cf0 ([\cf3 \
\cf0 		 0.18499624729156, 0.87819421291351, 0.35087406635284, 0.24363338947296, 0.81097602844238, 0.35597717761993, 0.57222485542297, 0.56964504718781, 0.59950399398804, 0.16881740093231, 0.21253836154938, 0.23872709274292, 0.35012233257294, 0.22673523426056, 0.27448713779449, 0.40149891376495, 0.57712364196777, 0.21208488941193, 0.55605530738831, 0.060322403907776, 0.018023014068604, 0.67215847969055, 0.27005362510681, 0.26436507701874, 0.44128906726837, 0.62675774097443, 0.40126299858093, 0.13725066184998		\cf2 // second, fourth etc. notes\
\cf0 	], \cf3 inf\cf0 ),\
	\cf5 \\dur\cf0 , 0.25\
).play;)\
)\
\
\pard\pardeftab720\ql\qnatural

\fs36 \cf0 o= 
\fs18 \{\cf19 Pan2\cf0 .ar(\cf19 Mix.new\cf0 (\cf19 Gendy3\cf0 .ar(0, 0, \cf19 SinOsc\cf0 .kr(0.1, 0, 0.1, 0.9),1.0, [100,205,410], 0.011,0.005, 12, 12, 0.32)), 0.0)\}.play;\
\
\
\

\fs36 o= 
\fs18 \{\cf19 Pan2\cf0 .ar(\cf19 Mix.new\cf0 (\cf19 Gendy3\cf0 .ar(0, 0, \cf19 SinOsc\cf0 .kr(0.1, 0, 0.1, 0.9),1.0, [100*[0.18499624729156, 0.87819421291351, 0.35087406635284, 0.24363338947296, 0.81097602844238, 0.35597717761993, 0.57222485542297, 0.56964504718781, 0.59950399398804, 0.16881740093231, 0.21253836154938, 0.23872709274292, 0.35012233257294, 0.22673523426056, 0.27448713779449, 0.40149891376495, 0.57712364196777, 0.21208488941193, 0.55605530738831, 0.060322403907776, 0.018023014068604, 0.67215847969055, 0.27005362510681, 0.26436507701874, 0.44128906726837, 0.62675774097443, 0.40126299858093, 0.13725066184998]], 0.011,0.005, 12, 12, 0.32)), 0.0)\}.play;\
\
\
\pard\pardeftab720\ql\qnatural

\f3\fs28 \cf20 \{ Splay.ar(SinOsc.ar(
\f1\fs18 \cf0 1000*[0.18499624729156, 0.87819421291351, 0.35087406635284, 0.24363338947296, 0.81097602844238, 0.35597717761993, 0.57222485542297, 0.56964504718781, 0.59950399398804, 0.16881740093231, 0.21253836154938, 0.23872709274292, 0.35012233257294, 0.22673523426056, 0.27448713779449, 0.40149891376495, 0.57712364196777, 0.21208488941193, 0.55605530738831, 0.060322403907776, 0.018023014068604, 0.67215847969055, 0.27005362510681, 0.26436507701874, 0.44128906726837, 0.62675774097443, 0.40126299858093, 0.13725066184998]
\f3\fs28 \cf20 )) \}.play;\
\
\
\pard\pardeftab720\ql\qnatural

\f1\fs18 \cf0 \
\
\pard\pardeftab720\ql\qnatural

\f0\fs24 \cf0 \
\pard\pardeftab720\ql\qnatural

\b\fs28 \cf0 Catchall Patterns
\b0 \
\pard\pardeftab720\ql\qnatural

\fs24 \cf0 \
Not everything is pre-written as a pattern class. These patterns let you embed custom logic.\
\
\pard\pardeftab720\ql\qnatural

\b \cf0 Pfunc(nextFunc, resetFunc):
\b0  The next value is the return value from evaluating nextFunc. If .reset is called on a stream made from this pattern, resetFunc is evaluated. The stream will run indefinitely until nextFunc returns nil.\
\

\b Pfuncn(func, repeats):
\b0  Like Pfunc, output values come from evaluating the function. Pfuncn, however, returns exactly 'repeats' values and then stops. The default number of repeats is 1.\
\

\b Proutine(routineFunc):
\b0  Use the routineFunc in a routine. The stream's output values are whatever this function .yields. Proutine ends when it yields nil.\
\
\
Next, we'll look at the central pattern for audio sequencing: 
\b Pbind
\b0 .\
\
Previous:		{\field{\*\fldinst{HYPERLINK "http://help.sccode.org/Streams-Patterns-Events/A%20Practical%20Guide/PG_01_Introduction.html"}}{\fldrslt \cf4 PG_01_Introduction}}\cf3 \
\pard\pardeftab720\ql\qnatural
\cf0 Next:		{\field{\*\fldinst{HYPERLINK "http://help.sccode.org/Streams-Patterns-Events/A%20Practical%20Guide/PG_03_What_Is_Pbind.html"}}{\fldrslt \cf4 PG_03_What_Is_Pbind}}}